var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var mysql = require('mysql');

var routes = require('./routes/index');
var users = require('./routes/users');

var app = express();

var WEBHOOK_SECRET = "YOUR_WEBHOOK_SECRET_HERE";
// require('./router/main')(app);
// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

var connection = mysql.createConnection({
  host     : 'localhost',
  user     : 'root',
  password : ''
});
connection.connect(function(err){
  if(err) throw err;
  console.log('You are successfully connected to DB');
  connection.query('USE test');
    console.log('You are successfully connected to test database');

});


app.get('/hello',function(req,res){
        res.send('hello umer');
     });
app.get('/alldata',function(req,res){
  console.log('alldata');
  connection.query('select * from data' , function(err , rows){
    res.send(rows);
  });
});

app.post('/telerivet/webhook',
   function(req, res) {
    console.log('In webhook');
       var secret = req.body.secret;
       if (secret !== WEBHOOK_SECRET) {
           res.status(403).end();
           return;
       }
       
       if (req.body.event == 'incoming_message') {
       
         var content = req.body.content;
         var from_number = req.body.from_number;
         var phone_id = req.body.phone_id;
         
         // do something with the message, e.g. send an autoreply
         res.json({
           messages: [
             { content: "Thanks for your message!" }
           ]
         });
         
       }  
       
       res.status(200).end();
   }
);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});



app.listen(3000, function () {
  console.log('Example app listening on port 3000!');
});